plugins {
	id 'java'
	id 'eclipse'
}

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

version = '0.0.0-SNAPSHOT'

defaultTasks 'build'

dependencies {
	compile 'com.untill:untill-driver-api2:11.0-SNAPSHOT'
	compile fileTree(dir: 'lib', include: '*.jar')
	testCompile 'junit:junit:4.12'
}

repositories {
	maven {
		url 'https://dev.untill.com/artifactory/repo'
	}
}

jar {
	manifest.attributes(
		'Specification-Title': project.name,
		'Specification-Version': version.replaceAll(/-SNAPSHOT$/, ''),
		'Implementation-Title': project.name,
		'Implementation-Version': version,
		'Main-Class': "${gradle.mainClassPackage}.${gradle.mainClassName}",
		'Class-Path': '.',
	)
}

configurations.archives.artifacts.removeAll { it.archiveTask.is jar }

task driverZip(type: Zip, dependsOn: jar) {
	group = 'build'
	description = 'assembles a zip archive'
	from (jar.archivePath)
	configurations.compile.resolvedConfiguration.resolvedArtifacts.each { artifact ->
		if (artifact.name != 'untill-driver-api2') {
			from (artifact.file)
		}
	}
	from ('lib') {
		include '**/*.jar'
	}
}

artifacts {
	archives driverZip
}

task driverFolder(type: Copy, dependsOn: jar) {
	group = 'build'
	description = 'assembles driver folder'
	from (jar.archivePath)
	configurations.compile.resolvedConfiguration.resolvedArtifacts.each { artifact ->
		if (artifact.name != 'untill-driver-api2') {
			from (artifact.file)
		}
	}
	from ('lib') {
		include '**/*.jar'
	}
	into new File(project.distsDir, project.name)
}
build.dependsOn 'driverFolder'

if (!file('src').exists()) {
	if (project.name == 'my-driver') throw new GradleException('Project name is not changed from default value')
	if (gradle.mainClassPackage == 'com.mycompany.mypackage') throw new GradleException('Package is not changed from default value')
	if (gradle.mainClassName == 'MyDriver') throw new GradleException('Class name is not changed from default value')

	sourceSets.main.java.srcDirs.each { it.mkdirs() }
	sourceSets.test.java.srcDirs.each { it.mkdirs() }
	sourceSets.main.resources.srcDirs.each { it.mkdirs() }
	sourceSets.test.resources.srcDirs.each { it.mkdirs() }
	file('lib').mkdirs()
	def packagePath = new File(sourceSets.main.java.srcDirs[0], gradle.mainClassPackage.replace('.', '/'))
	packagePath.mkdirs()
	new File(packagePath, gradle.mainClassName + '.java').write """\
		package ${gradle.mainClassPackage};

		import java.util.ArrayList;
		import java.util.Map;

		import com.untill.driver.IDriver;
		import com.untill.driver.IDriverContext;
		import com.untill.driver.interfaces.IDriverInterface;
		import com.untill.driver.params.DriverParam;
		import com.untill.driver.params.ParamType;

		public class ${gradle.mainClassName} implements IDriver {

			public static final String PARAM_URL = "url";

			public static final String PARAM_URL_DEFAULT = "https://127.0.0.1:7777";

			public static final String PARAM_USER = "user";

			public static final String PARAM_PASSWORD = "password";

			@Override
			public ArrayList<DriverParam> getParamsList() {
				// TODO add real driver parameters. A code below is just an example
				return DriverParam.list(
						new DriverParam.Builder().key(PARAM_URL).title("Platform Address")
								.type(ParamType.STRING).defaultValue(PARAM_URL_DEFAULT).mandatory(true).build(),
						new DriverParam.Builder().key(PARAM_USER).title("User")
								.type(ParamType.STRING).mandatory(true).build(),
						new DriverParam.Builder().key(PARAM_PASSWORD).title("Password")
								.type(ParamType.STRING).mandatory(true).build()
				);
			}

			@Override
			public String getDriverName() {
				return "Foo Driver";
			}

			@Override
			public String getProviderName() {
				return "My Company";
			}

			@Override
			public String getVersion() {
				return this.getClass().getPackage().getImplementationVersion();
			}

			@Override
			public Map<Class<? extends IDriverInterface>, IDriverInterface> init(IDriverContext context) {
				/* 
				 * TODO init & return interfaces, example:
				 * return DriverInterfaces.map(IEft, FooEft);
				 */
				return null;
			}

			@Override
			public void finit() {
				// TODO Release resources, etc
			}

		}
	""".stripIndent()
}
